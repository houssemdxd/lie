 
 
 <style>
body,html
{
    height: 100%;
    width: 100%;
}
 
 body {
    background-color: #293a51 !important;
    
    height:97%;
    display: flex;
flex-direction: column;
justify-content: center;
}
 .box1
 {
position: absolute;
height: 50% !important;
width: 70%;
background-color: blanchedalmond;
align-self: center;
z-index: 1;
display: flex;

 }
 .box2
 {
    align-self: center;
padding: 10px;
padding-bottom: 0px;
height: 99%;
background-color: #2a3c60;
display: flex;
flex-direction: column;
border-radius: 20px;
justify-content: center;
margin-top: 1%;
width: 90%;


 }
 .table {
    height: 70%;
    min-height: 42%;
    display: flex;
    justify-content: center;
    flex-direction: row;
 }
 .box3
 {
zoom: 120%;
padding-left:10%;
padding-right:10%;
display: flex;
justify-content: center;
gap: 40px;
}
body{
    zoom:87%;
}
.card
    {
        min-width: 5%;
        min-height:100px

    }



    .card.disabled {
    background-color: #f0f0f0;
    cursor: not-allowed;
}

.card {
    position: relative;
    background-size: cover;
    background-repeat: no-repeat;
    background-position: center;
    width: 70px;
    background-color:none;
}
.card img
{
}

.card .card-count {
    position: absolute;
    top: 5px;
    left: 5px;
    background-color: rgba(84, 242, 113, 0.7);
    color: white;
    padding: 2px 5px;
    border-radius: 3px;
    font-size: 20px;
}

.card.disabled {
    background-color: #f0f0f0;
    cursor: not-allowed;
    opacity: 0.5;
}

.done-button {
    background-color: #28a745; /* A vibrant green color */
    color: white;              /* White text for contrast */
    padding: 10px 20px;        /* Comfortable padding */
    font-size: 16px;           /* Easy-to-read text size */
    border: none;              /* Remove default border */
    border-radius: 8px;        /* Rounded corners for a modern look */
    cursor: pointer;           /* Pointer cursor to indicate interactivity */
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); /* Subtle shadow for depth */
    transition: background-color 0.3s ease, transform 0.2s ease; /* Smooth transition for hover effects */
}

.done-button:hover {
    background-color: #218838; /* Slightly darker green on hover */
    transform: translateY(-2px); /* Lift the button up slightly on hover */
}

.done-button:active {
    background-color: #1e7e34; /* Darker green when clicked */
    transform: translateY(0);   /* Reset the lift effect on click */
}

.done-button:disabled {
    background-color: #6c757d; /* Gray out the button when disabled */
    cursor: not-allowed;       /* Change cursor to indicate non-interactivity */
    opacity: 0.65;             /* Reduce opacity for disabled state */
}
.content
{
    padding: 1%;
   height: 400px;
  width: 80%;
  background-color: #2d4366;
  align-self: center;
  border-radius: 40%;
  border: 30px solid #3d577f;
  display: flex;
  
}
.containertable
{
    padding: 20px;
    gap: 2%;
    display: flex;
    flex-direction: row;
    display: flex;
    flex-wrap: wrap;
    gap: 4%; /* or whatever spacing you need */
}
.button-put
{position: absolute;
    width: 100px;
    height: 50px;
    background-color: #9cd561;
    bottom: 35%;
    left: 11%;
    rotate: 10%;
    transition: transform 0.5s ease;  /* Smooth transition for transform */
    transform: rotate(20deg);  /* Rotate the div by 45 degrees */
    border-radius:10px;

}
.button-lier
{
    position: absolute;
    width: 100px;
    height: 50px;
    background-color: #fb757c;
    bottom: 32%;
    right: 12%;
    rotate: 9%;
    transition: transform 0.5s ease;  /* Smooth transition for transform */
    transform: rotate(140deg);  /* Rotate the div by 45 degrees */
    border-radius:10px;

}
.avatar
{
    height: 70px;
  border-radius: 100%;
  align-self: center;
  background-color: beige;
  width: 70px;
  margin: 5px;
  display: none;
  border: 2px solid aliceblue;
  z-index: 99999999999;

}
.avatar img
{

    height: inherit;
  border: 100%;
  border-radius: 100%;
  width: inherit;
}
.highlight-transition {
    animation: upDown 0.5s ease-in-out infinite alternate;
    border: 5px solid green; /* Optional: Add the border if you want */
}

@keyframes upDown {
    0% {
        transform: translateY(0);
    }
    100% {
        transform: translateY(-10px);
    }
}

.cardtable
{
    height: 0px;
    width: 10px;
    background-color: #2d4366 !important;
  

}

.avatar img {
    height: inherit;
    width: inherit;
    border-radius: 100%;
    display: block; /* Ensures there's no extra spacing around the image */
    margin: 0;      /* Removes any default margin */
    padding: 0;     /* Removes any default padding */
    border: none;   /* Ensures no border is applied unless explicitly defined */
}

.avatar {
    height: 70px;
    width: 70px;
    border-radius: 100%;
    align-self: center;
    background-color: beige; /* Background color could be causing the issue */
    margin: 5px;
    display: none;
    border: 2px solid aliceblue;
    overflow: hidden; /* Ensures image doesn't overflow the container */
}
 img {
    background-color: transparent !important;
    box-shadow: none !important;
}

img {
    background-color: transparent !important;
    box-shadow: none !important;
}
.box1 {

    position: absolute;
    top: 19%;
    width: 70%;
    background-color: rgb(23, 163, 182);
    align-self: center;
    z-index: 1;
    display: flex;
    flex-wrap: wrap; /* Allows divs to wrap within the box */
    justify-content: space-around; /* Spaces out the cards evenly */
    padding: 20px;
    box-shadow: 10 4px 8px rgba(41, 13, 120, 0.2); /* Add shadow for better visuals */
    border-radius: 10px;

}

.cardchoice {
    width: 50px;
    height: 100px;
    background-color: #f0f0f0;
    border: 2px solid #333;
    border-radius: 10px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 24px;
    font-weight: bold;
    cursor: pointer;
    transition: transform 0.2s, background-color 0.2s;
}

.cardchoice:hover {
    transform: scale(1.05); /* Slightly enlarge on hover */
    background-color: #e0e0e0;
}
.happy
{
    position: absolute;
    height: 25%;
    width: 25%;
    z-index: 999999999999;
}
.angry
{
    top: 30%;
    position: absolute;
    height: 14%;
    width: 12%;
    z-index: 999999999999;

}

 </style>
     <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">



<!--<h3> is a winner ::{{player.winner}}</h3>

     {% for playerty in players %}
     {{player.id }}
     {% endfor %}
-->


<div class="box1 box" id="box1">
    <div class="cardchoice" data-value="1">1</div>
    <div class="cardchoice" data-value="2">2</div>
    <div class="cardchoice" data-value="3">3</div>
    <div class="cardchoice" data-value="4">4</div>
    <div class="cardchoice" data-value="5">5</div>
    <div class="cardchoice" data-value="6">6</div>
    <div class="cardchoice" data-value="7">7</div>
    <div class="cardchoice" data-value="8">8</div>
    <div class="cardchoice" data-value="9">9</div>
    <div class="cardchoice" data-value="10">10</div>

</div>
<div class="box2 box ">
    <div class="avatar"></div>
<div class="table" id="table">
    <img src="{{asset('images/hapy.gif')}}"  >

    {% if state == 1 and ok and ready %}
<div class="button-put" id="put" onclick="put()"> <h6>put cards</h6></div>
{% else %}


 {% endif %}
 {% if lie  and ok==false and ready and roundBlocked==false %}

<div class="button-lier" id="button-lier" onclick="fetchLieData({{player.id}})"></div>
{% endif %}
<div class="avatar"></div>
<h1>{{table}}</h1>
    <div class="content">
        <div class="container containertable" id="containerscard">
            {% if table >0 %}

            {% for i in 1..table %}


            <div class="cardtable">
                <img src="{{asset('images/lie.png')}}"  height="100">
            </div>
            
          {% endfor %}
          {%endif %}

        </div>
       

        
    </div>
    <div class="avatar"></div>

    <h3 id="goalup">{{goal}}</h3>
    </div>


   
    <div class="box3 box" id="box3">
    


    </div>
   


  


</div>



<script>
function displayImage() {
    // Create a new image element
    const img = document.createElement('img');
    img.src = '/images/happy.gif'; // Replace with your image path
    img.alt = 'Temporary Image';
    img.height = 100; // Set the desired height
    img.className = "happy"    // Append the image to the container
    const container = document.getElementById('table');
    container.appendChild(img);

    // Set a timeout to remove the image after 4 seconds (4000 milliseconds)
    setTimeout(() => {
        container.removeChild(img);
    }, 4000);
}
function displayImageangry() {
    // Create a new image element
    const img = document.createElement('img');
    img.src = '/images/angry.gif'; // Replace with your image path
    img.alt = 'Temporary Image';
    img.height = 100; // Set the desired height
    img.className = "angry"    // Append the image to the container
    const container = document.getElementById('table');
    container.appendChild(img);

    // Set a timeout to remove the image after 4 seconds (4000 milliseconds)
    setTimeout(() => {
        container.removeChild(img);
    }, 4000);
}


{%if ready%}

{% set j = 0 %}
{% set x = 0 %}

{% for playerty in players %}
    {% if playerty.id != player.id %}
        avatars = document.getElementsByClassName("avatar");
        avatars[{{ x }}].style.display = "block";
        
        // Add the image to the div
        avatars[{{ x }}].innerHTML = `<img src="{{ asset('images/' ~ (j + 1) ~ 'avatar.jpeg') }}" alt="Player Avatar">`;
        
        // Add the player's ID as an attribute
        avatars[{{ x }}].setAttribute("id", "{{ playerty.id }}");

            {% set x = x + 1 %}

    {% endif %}
    {% set j = j + 1 %}

{% endfor %}
//state updatte
{% for playerty in players %}

{% if playerty.state == 1 and ok and ready and playerty.id != player.id %}

document.getElementById("{{ playerty.id }}").classList.add("highlight-transition");

{% endif %}


{% endfor %}


{% if first and player.state==1 and player.code=="181818" %}
console.log('Condition met: Showing box1 for the first round');
        document.addEventListener('DOMContentLoaded', function() {
            var t = document.getElementById('box1');
            t.style.display = "flex";
        });
   
{% else %}
  
        console.log('Condition not met for the first round ');
{% endif %}


{% if first == false and earn and player.state == 1 %}
    
        console.log('Condition met: Showing box1');
        document.addEventListener('DOMContentLoaded', function() {
            var t = document.getElementById('box1');
            t.style.display = "flex";
        });
   
{% else %}
  
        console.log('Condition not met');
{% endif %}











document.getElementsByClassName("avatar")

var playerId= {{player.id}};
goal=1;

function put()
{     
var all=document.getElementsByClassName("button-put");
if(all.length>0)
{
for(i =0;i<all.length;i++)
{
    all[i].style.display="none";
}
           }


    var putbutton=document.getElementById('put');
           if( putbutton)
           {
            console.log("removing put button")
            var all=document.getElementsByClassName("button-put");
for(i =0;i<all.length;i++)
{
    all[i].style.display="none";
}
            putbutton.style.display="none !important";
           }

fetch(`/put/${playerId}/${goal}`, {
    method: 'POST',
    headers: {
        'Content-Type': 'application/json',
    },
    body: JSON.stringify({ cards: selectedCards })
})
.then(response => response.json())
.then(data => console.log(data))
.catch(error => console.error('Error:', error));

selectedCards=[];
}









var cards = [];
{% for card in cards %}
    cards.push({{card.card}});
{% endfor %}

const cardCount = {};

// Count the occurrences of each card
cards.forEach(card => {
    if (card in cardCount) {
        cardCount[card]++;
    } else {
        cardCount[card] = 1;
    }
});

// Convert cardCount object into an array of objects
 cardList = Object.keys(cardCount).map(key => {
    return { card: parseInt(key), count: cardCount[key] };
});

// Select the box element where cards will be injected
const box = document.getElementById('box3');

// Ensure the box element exists
if (box) {
    // Generate and inject card elements into the box
    cardList.forEach(item => {
        const cardDiv = document.createElement('div');
        cardDiv.classList.add('card');
        cardDiv.dataset.card = item.card;  // Store card number in data attribute

        // Set the background image for the card
        cardDiv.style.backgroundImage = `url('/images/${item.card}.png')`;

        // Add the count at the top left corner
        cardDiv.innerHTML = `
            <span class="card-count">${item.count}</span>
        `;

        box.appendChild(cardDiv);
    });
    selectedCards=[];
    // Add event listener for click events
    box.addEventListener('click', function(event) {
        const cardDiv = event.target.closest('.card');
        if (cardDiv) {
            const cardNumber = cardDiv.dataset.card;
            console.log("clicked cardsssssssssssssssssssssssssss")
            // Find the corresponding card in the cardList
            const cardObj = cardList.find(item => item.card == cardNumber);
            
            if (cardObj && cardObj.count > 0) {
                cardObj.count--;
                cardDiv.querySelector('.card-count').textContent = cardObj.count;
                selectedCards.push(cardObj.card);
                if (cardObj.count === 0) {
                    cardDiv.classList.add('disabled');  // Optional: Add a class to indicate no more cards
                }
            }
        }
    });
} else {
    console.error("Box element not found. Ensure there is an element with the ID 'box3' in your HTML.");
}


var t = document.getElementById('box1');
t.style.display="none"
document.addEventListener('DOMContentLoaded', function() {
    const cards = document.querySelectorAll('.cardchoice'); // Select all divs with class "card"

    cards.forEach(card => {
        card.addEventListener('click', function() {
            const selectedValue = this.getAttribute('data-value'); // Get the data-value attribute of the clicked card
            t.style.display="none"
                goal=selectedValue;
            console.log('Selected card:', selectedValue); // Log the selected card value
        });
    });
});














function fetchLieData(playerId) {
    document.getElementById("button-lier").style.display="none";
    fetch(`/lie/${playerId}`)
        .then(response => response.json())  // Parse the JSON from the response
        .then(data => {
            console.log('Response:', data); // Log the response data for debugging

            // Check the desicon value
            if (data.desicon === 1) {
                displayImage();

                alternput=0;
                document.getElementById('box1').style.display = 'flex'; // Show the box1 div

                //show the put button 
                const newDiv = document.createElement('div');

                            // Set the class and id attributes
                            newDiv.className = 'button-put';
                            newDiv.id = 'put';

                            // Set the onclick attribute to call the put() function
                            newDiv.setAttribute('onclick', 'put()');

                            // Create the <h6> element and set its text content
                            const h6Element = document.createElement('h6');
                            h6Element.textContent = 'put cards from box1';

                            // Append the <h6> element to the new div
                            newDiv.appendChild(h6Element);

                            // Append the new div to the desired parent element in the DOM
                            // Replace 'table' with the ID of the parent element where you want to insert this div
                            document.getElementById('table').appendChild(newDiv);

            }
             if (data.desicon === 0)
             {
                alternput=0;
                displayImageangry();

                fetch('/handupdate/' + playerId)
                 .then(response => response.json())
                 .then(data => {
                    const cardU = data.updatedhand;
                    const box3new = document.getElementById("box3");

// Clear the previous content of the box3 div
box3new.innerHTML = '';

// Initialize an object to count the occurrences of each card
const cardCount = {};
cards=cardU;
// Count the occurrences of each card
cards.forEach(card => {
    if (card in cardCount) {
        cardCount[card]++;
    } else {
        cardCount[card] = 1;
    }
});

// Convert the cardCount object into an array of objects
cardList = Object.keys(cardCount).map(key => {
    return { card: parseInt(key), count: cardCount[key] };
});

// Get the 'box3' div

// Clear the previous content of the 'box3' div
box.innerHTML = '';

// Iterate through the cardList array and create corresponding div elements
cardList.forEach(item => {
    // Create a new div element for each card
    const cardDiv = document.createElement("div");
    cardDiv.className = "card";
    cardDiv.setAttribute("data-card", item.card);

    // Set the background image using the card number
    cardDiv.style.backgroundImage = `url('/images/${item.card}.png')`;

    // Create a span element to show the card count
    const span = document.createElement("span");
    span.className = "card-count";
    span.innerText = item.count; // Display the occurrence count

    // Append the span to the card div
    cardDiv.appendChild(span);

    // Append the card div to the 'box3' div
    box.appendChild(cardDiv);
});
    })
    .catch(error => console.error('Error fetching hand update:', error));













             }
        })
        .catch(error => {
            console.error('Error:', error);
        });
}


alternput=1;




let winstate = {{ player.winner }};
//Event listener for 'table' event
const eventSourceTable = new EventSource("{{ mercure('/' ~ rommid ~ '/table') | escape('js') }}");
eventSourceTable.onmessage = event => {
    console.log("Table update received");

    try {
        const data = JSON.parse(event.data);
        const cardsnumber = data.cardnumber;
        const container = document.getElementById('containerscard');

        container.innerHTML = '';

        for (let i = 0; i < cardsnumber; i++) {
            const cardDiv = document.createElement('div');
            cardDiv.className = 'cardtable';

            const img = document.createElement('img');
            img.src = '/images/lie.png';
            img.height = 100;

            cardDiv.appendChild(img);
            container.appendChild(cardDiv);
        }

        if (cardsnumber === 0) {
            container.innerHTML = '';
        }

        console.log("Number of cards on the table: " + cardsnumber);
    } catch (error) {
        console.error("Failed to process 'table' event:", error);
    }
};
// Reusable function to create and append buttons
function createButton(parentId, className, id, onClickFunction, buttonText) {
    const newDiv = document.createElement('div');
    newDiv.className = className;
    newDiv.id = id;
    newDiv.setAttribute('onclick', onClickFunction);

    const h6Element = document.createElement('h6');
    h6Element.textContent = buttonText;

    newDiv.appendChild(h6Element);
    document.getElementById(parentId).appendChild(newDiv);
}



// Event listener for 'goalUpdate' event
const eventSourceGoalUpdate = new EventSource("{{ mercure('/' ~ rommid ~ '/goalUpdate')|escape('js') }}");
eventSourceGoalUpdate.onmessage = event => {
    console.log("Goal update received");

    try {
        const goalUpdate = JSON.parse(event.data);
        const newGoal = goalUpdate.goalUpdate;

        document.getElementById("goalup").innerText = newGoal;
        document.getElementById("goalup").style.color = "white";
    } catch (error) {
        console.error("Failed to process 'goalUpdate' event:", error);
    }
};

// Event listener for 'loserplayer' event
const eventSourceLoserPlayer = new EventSource("{{ mercure('/' ~ playerIdt ~ '/loserplayer')|escape('js') }}");
eventSourceLoserPlayer.onmessage = event => {
    console.log("Loser update received");

    displayImageangry();

    try {
        const data = JSON.parse(event.data);
        const cards = data.update;

        const box3New = document.getElementById("box3");
        box3New.innerHTML = '';  // Clear previous content

        const cardCount = {};
        cards.forEach(card => {
            cardCount[card] = (cardCount[card] || 0) + 1;
        });

        const cardList = Object.keys(cardCount).map(key => ({
            card: parseInt(key),
            count: cardCount[key]
        }));

        cardList.forEach(item => {
            const cardDiv = document.createElement("div");
            cardDiv.className = "card";
            cardDiv.setAttribute("data-card", item.card);
            cardDiv.style.backgroundImage = `url('/images/${item.card}.png')`;

            const span = document.createElement("span");
            span.className = "card-count";
            span.innerText = item.count;

            cardDiv.appendChild(span);
            box3New.appendChild(cardDiv);
        });
    } catch (error) {
        console.error("Failed to process 'loserplayer' event:", error);
    }
};

// Event listener for 'putdone' event
const eventSourcePutDone = new EventSource("{{ mercure('/' ~ rommid ~ '/putdone')|escape('js') }}");
eventSourcePutDone.onmessage = event => {
    console.log("Put done update received");

    try {
        const data = JSON.parse(event.data);
        const currentPlayer = data.currentroundplayer;
        const activePlayer = data.nextplayer;
        var cardnumberP=data.cardnumber;











        const container = document.getElementById('containerscard');

container.innerHTML = '';

for (let i = 0; i < cardnumberP; i++) {
    const cardDiv = document.createElement('div');
    cardDiv.className = 'cardtable';

    const img = document.createElement('img');
    img.src = '/images/lie.png';
    img.height = 100;

    cardDiv.appendChild(img);
    container.appendChild(cardDiv);
}

if (cardnumberP === 0) {
    container.innerHTML = '';
}










        if (currentPlayer !== {{ player.id }} && winstate != 1) {
            createButton('table', 'button-lier', 'button-lier', `fetchLieData({{ player.id }})`, '');

            setTimeout(() => {
                document.getElementById('button-lier')?.remove();

                if (activePlayer === {{ player.id }} && alternput === 1) {
                    console.log("Your turn to play, mister " + activePlayer);
                    createButton('table', 'button-put', 'put', 'put()', 'Put cards');
                }
                alternput = 1;
            }, 4000);
        }
    } catch (error) {
        console.error("Failed to process 'putdone' event:", error);
    }
};

// Event listener for 'ready' event
const eventSourceReady = new EventSource("{{ mercure('/' ~ rommid ~ '/ready')|escape('js') }}");
eventSourceReady.onmessage = event => {
    try {
        const data = JSON.parse(event.data);
        if (data.ready) {
            location.reload();
        }
    } catch (error) {
        console.error("Failed to process 'ready' event:", error);
    }
};

// Event listener for 'win' event
const eventSourceWin = new EventSource("{{ mercure('/' ~ rommid ~ '/win')|escape('js') }}");
eventSourceWin.onmessage = event => {
    console.log("Win update received");

    try {
        const data = JSON.parse(event.data);
        const winningPlayerIds = data.winningPlayerIds;

        winningPlayerIds.forEach(playerId => {
            if ({{ player.id }} == playerId) {
                alert("You are the winner!");
                winstate = 1;
            }
            console.log('Winning Player ID:', playerId);
        });
    } catch (error) {
        console.error("Failed to process 'win' event:", error);
    }
};

// Event listener for 'angel' event
const eventSourceAngel = new EventSource("{{ mercure('/' ~ playerIdt) | escape('js') }}");
eventSourceAngel.onmessage = () => {
    console.log("Angel event received");
    document.getElementById('box1').style.display = "flex";
    createButton('table', 'button-put', 'put', 'put()', 'Put cards from box1');
};



// Event listener for 'prevent' event
const eventSourcePrevent = new EventSource("{{ mercure('/' ~ rommid ~ '/prevent') | escape('js') }}");
eventSourcePrevent.onmessage = () => {
    console.log("Prevent update received");
    alternput = 0;

    document.querySelectorAll(".button-lier").forEach(button => button.remove());
};



{%  endif  %}

</script>


